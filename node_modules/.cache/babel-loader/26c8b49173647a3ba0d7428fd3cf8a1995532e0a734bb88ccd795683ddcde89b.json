{"ast":null,"code":"```jsx\nimport React, { useReducer, useMemo, lazy, Suspense, useState } from \"react\";\n\n/* -------------------------------------------------------------\n   UTILITY\n-------------------------------------------------------------*/\nfunction calculateTotal(orders) {\n  return orders.reduce((sum, order) => sum + (order.total ?? order.price ?? 0), 0);\n}\n\n/* -------------------------------------------------------------\n   REDUCER\n-------------------------------------------------------------*/\nfunction dashboardReducer(state, action) {\n  switch (action.type) {\n    case \"ADD_ACTIVE_ORDER\":\n      return { ...state, activeOrders: [...state.activeOrders, action.order] };\n    case \"COMPLETE_ORDER\":\n      return {\n        ...state,\n        activeOrders: state.activeOrders.filter((o) => o.id !== action.id),\n        completedOrders: [...state.completedOrders, action.order],\n      };\n    case \"ADD_STOCK_ITEM\":\n      return { ...state, stockItems: [...state.stockItems, action.item] };\n    case \"TOGGLE_ORDER_MODAL\":\n      return { ...state, isOrderModalOpen: !state.isOrderModalOpen };\n    default:\n      return state;\n  }\n}\n\nconst initialState = {\n  activeOrders: [],\n  completedOrders: [],\n  stockItems: [],\n  isOrderModalOpen: false,\n};\n\n/* -------------------------------------------------------------\n   MAIN COMPONENT – mobile‑first layout\n-------------------------------------------------------------*/\nconst OrderModal = lazy(() => import(\"./OrderModal\"));\n\nexport default function DashboardPage() {\n  const [state, dispatch] = useReducer(dashboardReducer, initialState);\n\n  const totalRevenue = useMemo(\n    () => calculateTotal(state.completedOrders),\n    [state.completedOrders]\n  );\n\n  return (\n    <div className=\"min-h-screen flex flex-col gap-4 bg-gradient-to-b from-indigo-50 to-white\">\n      {/* Header */}\n      <HeaderBar totalRevenue={totalRevenue} />\n\n      <main className=\"flex-1 flex flex-col gap-4 px-4 pb-28 lg:pb-4 w-full lg:max-w-6xl lg:mx-auto\">\n        {/* 3‑col grid on large, 1‑col on mobile */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n          <AddProductPanel\n            onAddProduct={(product) =>\n              dispatch({ type: \"ADD_STOCK_ITEM\", item: product })\n            }\n          />\n          <OrdersActiveList\n            orders={state.activeOrders}\n            onComplete={(order) =>\n              dispatch({ type: \"COMPLETE_ORDER\", id: order.id, order })\n            }\n          />\n          <StockSection items={state.stockItems} />\n        </div>\n\n        <CompletedOrdersList orders={state.completedOrders} />\n        <ChatBox />\n      </main>\n\n      {/* Floating action button per nuovo ordine */}\n      <button\n        className=\"fixed bottom-4 right-4 lg:hidden flex items-center gap-2 bg-emerald-600 hover:bg-emerald-700 text-white rounded-full shadow-lg px-6 py-3 text-lg font-semibold focus:outline-none\"\n        onClick={() => dispatch({ type: \"TOGGLE_ORDER_MODAL\" })}\n      >\n        + Ordine\n      </button>\n\n      {/* Modal */}\n      <Suspense fallback={null}>\n        {state.isOrderModalOpen && (\n          <OrderModal\n            onClose={() => dispatch({ type: \"TOGGLE_ORDER_MODAL\" })}\n          />\n        )}\n      </Suspense>\n    </div>\n  );\n}\n\n/* -------------------------------------------------------------\n   COMPONENTI FIGLI – palette & spacing ottimizzati\n-------------------------------------------------------------*/\nfunction Card({ children, className = \"\" }) {\n  return (\n    <section\n      className={\n        \"bg-white/90 backdrop-blur rounded-2xl shadow-sm p-4 flex flex-col \" +\n        className\n      }\n    >\n      {children}\n    </section>\n  );\n}\n\nfunction HeaderBar({ totalRevenue }) {\n  return (\n    <header className=\"sticky top-0 z-20 w-full bg-indigo-700 text-white px-4 py-3 flex items-center justify-between shadow-md\">\n      <h1 className=\"text-xl font-bold tracking-wide\">Dashboard</h1>\n      <span className=\"text-sm font-medium\">\n        Revenue Totale: €{totalRevenue.toFixed(2)}\n      </span>\n    </header>\n  );\n}\n\nfunction AddProductPanel({ onAddProduct }) {\n  const [name, setName] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [qty, setQty] = useState(1);\n\n  return (\n    <Card>\n      <h2 className=\"text-lg font-semibold mb-3\">Aggiungi prodotto</h2>\n      <input\n        className=\"border border-slate-300 rounded-lg p-2 text-sm mb-2 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n        placeholder=\"Nome\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n      <input\n        className=\"border border-slate-300 rounded-lg p-2 text-sm mb-2 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n        placeholder=\"Prezzo (€)\"\n        type=\"number\"\n        value={price}\n        onChange={(e) => setPrice(e.target.value)}\n      />\n      <input\n        className=\"border border-slate-300 rounded-lg p-2 text-sm mb-4 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n        placeholder=\"Quantità\"\n        type=\"number\"\n        min={1}\n        value={qty}\n        onChange={(e) => setQty(parseInt(e.target.value, 10) || 1)}\n      />\n      <button\n        className=\"w-full bg-indigo-600 hover:bg-indigo-700 active:scale-95 text-white rounded-lg py-2 text-sm font-medium transition\"\n        onClick={() => {\n          if (!name || !price) return;\n          onAddProduct({ id: Date.now(), name, qty, price: parseFloat(price) });\n          setName(\"\");\n          setPrice(\"\");\n          setQty(1);\n        }}\n      >\n        Salva\n      </button>\n    </Card>\n  );\n}\n\nfunction OrdersActiveList({ orders, onComplete }) {\n  return (\n    <Card>\n      <h2 className=\"text-lg font-semibold mb-3\">Ordini Attivi</h2>\n      <ul className=\"flex flex-col gap-2 overflow-y-auto max-h-72 pr-1\">\n        {orders.map((order) => (\n          <li\n            key={order.id}\n            className=\"flex items-center justify-between bg-slate-100 rounded-lg px-3 py-2\"\n          >\n            <span className=\"text-sm font-medium\">{order.name}</span>\n            <button\n              className=\"bg-emerald-600 hover:bg-emerald-700 text-white rounded-md text-xs font-semibold px-2 py-1\"\n              onClick={() => onComplete(order)}\n            >\n              Completa\n            </button>\n          </li>\n        ))}\n        {orders.length === 0 && (\n          <p className=\"text-slate-500 text-sm\">Nessun ordine attivo.</p>\n        )}\n      </ul>\n    </Card>\n  );\n}\n\nfunction CompletedOrdersList({ orders }) {\n  return (\n    <Card>\n      <h2 className=\"text-lg font-semibold mb-3\">Ordini Completati</h2>\n      <ul className=\"flex flex-col gap-2 overflow-y-auto max-h-72 pr-1\">\n        {orders.map((order) => (\n          <li\n            key={order.id}\n            className=\"flex justify-between bg-slate-100 rounded-lg px-3 py-2\"\n          >\n            <span className=\"text-sm font-medium\">{order.name}</span>\n            <span className=\"font-semibold text-sm\">\n              €{(order.total ?? order.price ?? 0).toFixed(2)}\n            </span>\n          </li>\n        ))}\n        {orders.length === 0 && (\n          <p className=\"text-slate-500 text-sm\">Nessun ordine completato.</p>\n        )}\n      </ul>\n    </Card>\n  );\n}\n\nfunction StockSection({ items }) {\n  return (\n    <Card>\n      <h2 className=\"text-lg font-semibold mb-3\">Magazzino</h2>\n      <ul className=\"flex flex-col gap-2 overflow-y-auto max-h-72 pr-1\">\n        {items.map((item) => (\n          <li\n            key={item.id}\n            className=\"flex justify-between bg-slate-50 rounded-lg px-3 py-2\"\n          >\n            <span className=\"text-sm font-medium\">{item.name}</span>\n            <span className=\"font-semibold text-sm\">{item.qty}</span>\n          </li>\n        ))}\n        {items.length === 0 && (\n          <p className=\"text-slate-500 text-sm\">Magazzino vuoto.</p>\n        )}\n      </ul>\n    </Card>\n  );\n}\n\nfunction ChatBox() {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n  return (\n    <Card className=\"mb-4 lg:mb-0\">\n      <h2 className=\"text-lg font-semibold mb-3\">Chat</h2>\n      <div className=\"flex flex-col gap-2 overflow-y-auto max-h-72 pr-1 mb-3\">\n        {messages.map((m, idx) => (\n          <div key={idx} className=\"bg-slate-100 rounded-lg px-3 py-2 text-sm\">\n            {m}\n          </div>\n        ))}\n        {messages.length === 0 && (\n          <p className=\"text-slate-500 text-sm\">Nessun messaggio.</p>\n        )}\n      </div>\n      <div className=\"flex gap-2\">\n        <input\n          className=\"flex-1 border border-slate-300 rounded-lg p-2 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n          placeholder=\"Scrivi un messaggio…\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n        />\n        <button\n          className=\"bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg px-4 text-sm font-medium\"\n          onClick={() => {\n            if (!input) return;\n            setMessages([...messages, input]);\n            setInput(\"\");\n          }}\n        >\n          Invia\n        </button>\n      </div>\n    </Card>\n  );\n}\n```;","map":{"version":3,"names":[],"sources":["/Users/cnfora/Downloads/fyfe-final/src/components/DashboardPage.jsx"],"sourcesContent":["```jsx\nimport React, { useReducer, useMemo, lazy, Suspense, useState } from \"react\";\n\n/* -------------------------------------------------------------\n   UTILITY\n-------------------------------------------------------------*/\nfunction calculateTotal(orders) {\n  return orders.reduce((sum, order) => sum + (order.total ?? order.price ?? 0), 0);\n}\n\n/* -------------------------------------------------------------\n   REDUCER\n-------------------------------------------------------------*/\nfunction dashboardReducer(state, action) {\n  switch (action.type) {\n    case \"ADD_ACTIVE_ORDER\":\n      return { ...state, activeOrders: [...state.activeOrders, action.order] };\n    case \"COMPLETE_ORDER\":\n      return {\n        ...state,\n        activeOrders: state.activeOrders.filter((o) => o.id !== action.id),\n        completedOrders: [...state.completedOrders, action.order],\n      };\n    case \"ADD_STOCK_ITEM\":\n      return { ...state, stockItems: [...state.stockItems, action.item] };\n    case \"TOGGLE_ORDER_MODAL\":\n      return { ...state, isOrderModalOpen: !state.isOrderModalOpen };\n    default:\n      return state;\n  }\n}\n\nconst initialState = {\n  activeOrders: [],\n  completedOrders: [],\n  stockItems: [],\n  isOrderModalOpen: false,\n};\n\n/* -------------------------------------------------------------\n   MAIN COMPONENT – mobile‑first layout\n-------------------------------------------------------------*/\nconst OrderModal = lazy(() => import(\"./OrderModal\"));\n\nexport default function DashboardPage() {\n  const [state, dispatch] = useReducer(dashboardReducer, initialState);\n\n  const totalRevenue = useMemo(\n    () => calculateTotal(state.completedOrders),\n    [state.completedOrders]\n  );\n\n  return (\n    <div className=\"min-h-screen flex flex-col gap-4 bg-gradient-to-b from-indigo-50 to-white\">\n      {/* Header */}\n      <HeaderBar totalRevenue={totalRevenue} />\n\n      <main className=\"flex-1 flex flex-col gap-4 px-4 pb-28 lg:pb-4 w-full lg:max-w-6xl lg:mx-auto\">\n        {/* 3‑col grid on large, 1‑col on mobile */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n          <AddProductPanel\n            onAddProduct={(product) =>\n              dispatch({ type: \"ADD_STOCK_ITEM\", item: product })\n            }\n          />\n          <OrdersActiveList\n            orders={state.activeOrders}\n            onComplete={(order) =>\n              dispatch({ type: \"COMPLETE_ORDER\", id: order.id, order })\n            }\n          />\n          <StockSection items={state.stockItems} />\n        </div>\n\n        <CompletedOrdersList orders={state.completedOrders} />\n        <ChatBox />\n      </main>\n\n      {/* Floating action button per nuovo ordine */}\n      <button\n        className=\"fixed bottom-4 right-4 lg:hidden flex items-center gap-2 bg-emerald-600 hover:bg-emerald-700 text-white rounded-full shadow-lg px-6 py-3 text-lg font-semibold focus:outline-none\"\n        onClick={() => dispatch({ type: \"TOGGLE_ORDER_MODAL\" })}\n      >\n        + Ordine\n      </button>\n\n      {/* Modal */}\n      <Suspense fallback={null}>\n        {state.isOrderModalOpen && (\n          <OrderModal\n            onClose={() => dispatch({ type: \"TOGGLE_ORDER_MODAL\" })}\n          />\n        )}\n      </Suspense>\n    </div>\n  );\n}\n\n/* -------------------------------------------------------------\n   COMPONENTI FIGLI – palette & spacing ottimizzati\n-------------------------------------------------------------*/\nfunction Card({ children, className = \"\" }) {\n  return (\n    <section\n      className={\n        \"bg-white/90 backdrop-blur rounded-2xl shadow-sm p-4 flex flex-col \" +\n        className\n      }\n    >\n      {children}\n    </section>\n  );\n}\n\nfunction HeaderBar({ totalRevenue }) {\n  return (\n    <header className=\"sticky top-0 z-20 w-full bg-indigo-700 text-white px-4 py-3 flex items-center justify-between shadow-md\">\n      <h1 className=\"text-xl font-bold tracking-wide\">Dashboard</h1>\n      <span className=\"text-sm font-medium\">\n        Revenue Totale: €{totalRevenue.toFixed(2)}\n      </span>\n    </header>\n  );\n}\n\nfunction AddProductPanel({ onAddProduct }) {\n  const [name, setName] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [qty, setQty] = useState(1);\n\n  return (\n    <Card>\n      <h2 className=\"text-lg font-semibold mb-3\">Aggiungi prodotto</h2>\n      <input\n        className=\"border border-slate-300 rounded-lg p-2 text-sm mb-2 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n        placeholder=\"Nome\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n      <input\n        className=\"border border-slate-300 rounded-lg p-2 text-sm mb-2 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n        placeholder=\"Prezzo (€)\"\n        type=\"number\"\n        value={price}\n        onChange={(e) => setPrice(e.target.value)}\n      />\n      <input\n        className=\"border border-slate-300 rounded-lg p-2 text-sm mb-4 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n        placeholder=\"Quantità\"\n        type=\"number\"\n        min={1}\n        value={qty}\n        onChange={(e) => setQty(parseInt(e.target.value, 10) || 1)}\n      />\n      <button\n        className=\"w-full bg-indigo-600 hover:bg-indigo-700 active:scale-95 text-white rounded-lg py-2 text-sm font-medium transition\"\n        onClick={() => {\n          if (!name || !price) return;\n          onAddProduct({ id: Date.now(), name, qty, price: parseFloat(price) });\n          setName(\"\");\n          setPrice(\"\");\n          setQty(1);\n        }}\n      >\n        Salva\n      </button>\n    </Card>\n  );\n}\n\nfunction OrdersActiveList({ orders, onComplete }) {\n  return (\n    <Card>\n      <h2 className=\"text-lg font-semibold mb-3\">Ordini Attivi</h2>\n      <ul className=\"flex flex-col gap-2 overflow-y-auto max-h-72 pr-1\">\n        {orders.map((order) => (\n          <li\n            key={order.id}\n            className=\"flex items-center justify-between bg-slate-100 rounded-lg px-3 py-2\"\n          >\n            <span className=\"text-sm font-medium\">{order.name}</span>\n            <button\n              className=\"bg-emerald-600 hover:bg-emerald-700 text-white rounded-md text-xs font-semibold px-2 py-1\"\n              onClick={() => onComplete(order)}\n            >\n              Completa\n            </button>\n          </li>\n        ))}\n        {orders.length === 0 && (\n          <p className=\"text-slate-500 text-sm\">Nessun ordine attivo.</p>\n        )}\n      </ul>\n    </Card>\n  );\n}\n\nfunction CompletedOrdersList({ orders }) {\n  return (\n    <Card>\n      <h2 className=\"text-lg font-semibold mb-3\">Ordini Completati</h2>\n      <ul className=\"flex flex-col gap-2 overflow-y-auto max-h-72 pr-1\">\n        {orders.map((order) => (\n          <li\n            key={order.id}\n            className=\"flex justify-between bg-slate-100 rounded-lg px-3 py-2\"\n          >\n            <span className=\"text-sm font-medium\">{order.name}</span>\n            <span className=\"font-semibold text-sm\">\n              €{(order.total ?? order.price ?? 0).toFixed(2)}\n            </span>\n          </li>\n        ))}\n        {orders.length === 0 && (\n          <p className=\"text-slate-500 text-sm\">Nessun ordine completato.</p>\n        )}\n      </ul>\n    </Card>\n  );\n}\n\nfunction StockSection({ items }) {\n  return (\n    <Card>\n      <h2 className=\"text-lg font-semibold mb-3\">Magazzino</h2>\n      <ul className=\"flex flex-col gap-2 overflow-y-auto max-h-72 pr-1\">\n        {items.map((item) => (\n          <li\n            key={item.id}\n            className=\"flex justify-between bg-slate-50 rounded-lg px-3 py-2\"\n          >\n            <span className=\"text-sm font-medium\">{item.name}</span>\n            <span className=\"font-semibold text-sm\">{item.qty}</span>\n          </li>\n        ))}\n        {items.length === 0 && (\n          <p className=\"text-slate-500 text-sm\">Magazzino vuoto.</p>\n        )}\n      </ul>\n    </Card>\n  );\n}\n\nfunction ChatBox() {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n  return (\n    <Card className=\"mb-4 lg:mb-0\">\n      <h2 className=\"text-lg font-semibold mb-3\">Chat</h2>\n      <div className=\"flex flex-col gap-2 overflow-y-auto max-h-72 pr-1 mb-3\">\n        {messages.map((m, idx) => (\n          <div key={idx} className=\"bg-slate-100 rounded-lg px-3 py-2 text-sm\">\n            {m}\n          </div>\n        ))}\n        {messages.length === 0 && (\n          <p className=\"text-slate-500 text-sm\">Nessun messaggio.</p>\n        )}\n      </div>\n      <div className=\"flex gap-2\">\n        <input\n          className=\"flex-1 border border-slate-300 rounded-lg p-2 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n          placeholder=\"Scrivi un messaggio…\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n        />\n        <button\n          className=\"bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg px-4 text-sm font-medium\"\n          onClick={() => {\n            if (!input) return;\n            setMessages([...messages, input]);\n            setInput(\"\");\n          }}\n        >\n          Invia\n        </button>\n      </div>\n    </Card>\n  );\n}\n```\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}